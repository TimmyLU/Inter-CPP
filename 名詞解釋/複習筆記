#####來源網路參考######

1. call by value, call by reference 的解釋

Call by value : 最常見的函式寫法，呼叫者和被呼叫者的變數各自佔有記憶體，將參數複製再傳給函式。

Call by reference : 呼叫者和被呼叫者的變數使用相同的記憶體位址，因此在被呼叫函式中改變變數時，變動結果會保留。

2. 變數範圍和生命周期

local 變數 : 僅活在該函式內，存放位置在 stack 或 heap 記憶體中。

static 變數 : 生命周期 (life time) 跟程式一樣長，而範圍 (scope) 則維持不變，即在宣告的函式之外仍無法存取 static 變數。

global : 所有區段皆可使用此變數。

3. 記憶體的配置 & 定義

Stack : 存放函數的參數、區域變數等，由空間配置系統自行產生與回收。(會稱作 stack 是由於其配置遵守 LIFO)
        LIFO (Last In First Out) 大部分情況用來存local variable的地方, 可以用來實作四則運算

Heap : 一般由程式設計師分配釋放，執行時才會知道配置大小，如 malloc/new 和 free/delete。(注意其資料結構不是 DS 中的 heap 而是 link-list)
       二元樹的一種, 特性是root一定是最大或最小, 父節點必定大於子節點

Global : 包含 BSS (未初始化的靜態變數)、data section (全域變數、靜態變數) 和 text/code (常數字元)。

Queue : FIFO (First In First Out) stack的相反, 有些CPU的排班會利用queue

4. const

const 通常表示只可讀取不可寫入的變數，常用來宣告常數。

優點:
    提升程式碼可讀性。
    使編譯器保護那些不希望被改變的參數。
    給優化器一些附加的資訊。

5. inline

修飾的函式設為行內函式，即像巨集 (define) 一樣將該函式展開編譯，用來加速執行速度。

inline 和 #define 的差別在於：
    inline 函數只對參數進行一次計算，避免了部分巨集易產生的錯誤。
    inline 函數的參數類型被檢查，並進行必要的型態轉換。
    巨集定義盡量不使用於複雜的函數。
    用 inline 後編譯器不一定會實作，僅為建議。

6. bitwise operator

7. memcpy 和 strcpy

8. 延伸性資料型態：struct、typedef、union 和 enum

struct : 自定義的一種型別, 可以包含多個不同型別的變數, 每個成員都會配置一塊空間。
typedef : 可以為資料型態建立別名，使程式更易閱讀理解。
union : 跟struct有點像, 主要差別是裡面的成員共用一塊記憶體, 所需記憶體由型別最大的成員決定。
enum : 可以用來定義常數, 主要是可以提升程式可讀性, 裡面的值從值指定的值開始遞增, 預設為0。
